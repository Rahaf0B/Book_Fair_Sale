<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Imagekit</name>
    </assembly>
    <members>
        <member name="M:Imagekit.BaseImagekit`1.Add(System.String,System.Object)">
            <summary>
            Add transformation parameter.
            </summary>
            <param name="key">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Imagekit.Sdk.ImagekitClient.GetAuthenticationParameters(System.String,System.String)">
            <summary>
            Generate Auth params for client-side upload
            </summary>
            <param name="token">Random Token String</param>
            <param name="expire">Expire time for the token</param>
            <returns>Returns Authparams including token, expiry time and signature.</returns>
        </member>
        <member name="M:Transformation.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Transformation"/> class.
            </summary>
            <param name="transformParams">
            </param>
        </member>
        <member name="M:Transformation.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Transformation"/> class.
            Creates transformation object initialized with array of transformation parameters.
            </summary>
            <param name="transformParams">List of transformation parameters represented as pairs 'name=value'.</param>
        </member>
        <member name="M:Transformation.Add(System.String,System.Object)">
            <summary>
            Add transformation parameter.
            </summary>
            <param name="key">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Transformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Transformation"/> class.
            Creates empty transformation object.
            </summary>
        </member>
        <member name="F:Transformation.transformParams">
            <summary>
            A dictionary of transformation parameters.
            </summary>
        </member>
        <member name="F:Transformation.nestedTransforms">
            <summary>
            A list of nested transformations.
            </summary>
        </member>
        <member name="M:Transformation.#ctor(System.Collections.Generic.List{Transformation})">
            <summary>
            Initializes a new instance of the <see cref="T:Transformation"/> class.
            Creates transformation object chained with other transformations.
            </summary>
            <param name="transforms">List of transformations to chain with.</param>
        </member>
        <member name="M:Transformation.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Transformation"/> class.
            </summary>
            <param name="dictionary">
            </param>
        </member>
        <member name="P:Transformation.Params">
            <summary>
            Get the transformation parameters dictionary.
            </summary>
        </member>
        <member name="P:Transformation.NestedTransforms">
            <summary>
            Get list of nested transformations.
            </summary>
        </member>
        <member name="M:Transformation.Chain">
            <summary>
            Chain transformation.
            </summary>
        </member>
        <member name="M:Transformation.Clone">
            <summary>
            Get a deep cloned copy of this transformation.
            </summary>
            <returns>A deep cloned copy of this transformation.</returns>
        </member>
        <member name="M:Transformation.Generate">
            <summary>
            Get this transformation represented as string.
            </summary>
            <returns>The transformation represented as string.</returns>
        </member>
        <member name="M:Transformation.ToString">
            <summary>
            Get this transformation represented as string.
            </summary>
            <returns>The transformation represented as string.</returns>
        </member>
        <member name="M:Transformation.Width(System.Int32)">
            <summary>Width of a transformed image</summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Height(System.Int32)">
            <summary>Height of a transformed image</summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.AspectRatio(System.String)">
            <summary>Aspect Ratio of a transformed image</summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Quality(System.Int32)">
            <summary>
            JPG compression quality. 1 is the lowest quality and 100 is the highest. The default is the
            original image's quality or 80% if not available.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Crop(System.String)">
            <summary>Crop Transformation.</summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.CropMode(System.String)">
            <summary>Crop Mode</summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.X(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Y(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Focus(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Format(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Radius(System.Object)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Background(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Border(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Rotation(System.Object)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Rotate(System.Object)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Blur(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Named(System.String)">
            <summary>Add named transformation.</summary>
            <param name="value">named transformation.</param>
        </member>
        <member name="M:Transformation.OverlayImage(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayX(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayY(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayFocus(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayHeight(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayWidth(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayText(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextFontSize(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextFontFamily(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextColor(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverylayAlpha(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextTypography(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextTransparency(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextBackground(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextEncoded(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextWidth(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextPadding(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayTextInnerAlignment(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayRadius(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayBackground(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayImageTrim(System.Boolean)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayImageAspectRatio(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayImageBackground(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayImageBorder(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayImageDpr(System.Object)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayImageQuality(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.OverlayImageCropping(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Progressive(System.Boolean)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Lossless(System.Boolean)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Trim(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Metadata(System.Boolean)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.ColorProfile(System.Boolean)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.DefaultImage(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.Dpr(System.Object)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.EffectSharpen">
            <summary></summary>
        </member>
        <member name="M:Transformation.EffectSharpen(System.Int32)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.EffectUsm(System.String)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.EffectContrast">
            <summary></summary>
        </member>
        <member name="M:Transformation.EffectContrast(System.Object)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Transformation.EffectGray">
            <summary></summary>
        </member>
        <member name="M:Transformation.Original">
            <summary></summary>
        </member>
        <member name="M:Transformation.Raw(System.String)">
            <summary>
            Pass an raw transformation string (including chained transformations)
            </summary>
            <param name="value">A raw transformation string.</param>
        </member>
        <member name="M:RestClient.UploadAsync(FileCreateRequest)">
             <summary>
            
             </summary>
             <param name="fileCreateRequest"></param>
             <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:RestClient.DeleteFileAsync(System.String)">
             <summary>
            
             </summary>
             <param name="fileId"></param>
             <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:RestClient.BulkDeleteFilesAsync(System.Collections.Generic.List{System.String})">
             <summary>
            
             </summary>
             <param name="fileIds"></param>
             <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
    </members>
</doc>
